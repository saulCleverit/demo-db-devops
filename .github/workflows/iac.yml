name: "Create Infrastructure"

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  IAC:
    runs-on: ubuntu-latest
    env:
      TF_LOG: DEBUG
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}
      SQL_SERVER_NAME: ${{ secrets.SQL_SERVER_NAME }}
      SQL_DATABASE_NAME: ${{ secrets.SQL_DATABASE_NAME }}
      ADMIN_USERNAME: ${{ secrets.ADMIN_USERNAME }}
      BACKEND_RESOURCE_GROUP_NAME: ${{ secrets.BACKEND_RESOURCE_GROUP_NAME }}
      BACKEND_STORAGE_ACCOUNT_NAME: ${{ secrets.BACKEND_STORAGE_ACCOUNT_NAME }}
      BACKEND_CONTAINER_NAME: ${{ secrets.BACKEND_CONTAINER_NAME }}
      BACKEND_KEY: ${{ secrets.BACKEND_KEY }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Verify environment variables
        run: |
          echo "Verifying environment variables..."
          test -n "${ARM_SUBSCRIPTION_ID}" && echo "ARM_SUBSCRIPTION_ID is set" || echo "ARM_SUBSCRIPTION_ID is not set"
          test -n "${ARM_CLIENT_ID}" && echo "ARM_CLIENT_ID is set" || echo "ARM_CLIENT_ID is not set"
          test -n "${ARM_CLIENT_SECRET}" && echo "ARM_CLIENT_SECRET is set" || echo "ARM_CLIENT_SECRET is not set"
          test -n "${ARM_TENANT_ID}" && echo "ARM_TENANT_ID is set" || echo "ARM_TENANT_ID is not set"
          test -n "${BACKEND_RESOURCE_GROUP_NAME}" && echo "BACKEND_RESOURCE_GROUP_NAME is set" || echo "BACKEND_RESOURCE_GROUP_NAME is not set"
          test -n "${BACKEND_STORAGE_ACCOUNT_NAME}" && echo "BACKEND_STORAGE_ACCOUNT_NAME is set" || echo "BACKEND_STORAGE_ACCOUNT_NAME is not set"
          test -n "${BACKEND_CONTAINER_NAME}" && echo "BACKEND_CONTAINER_NAME is set" || echo "BACKEND_CONTAINER_NAME is not set"
          test -n "${BACKEND_KEY}" && echo "BACKEND_KEY is set" || echo "BACKEND_KEY is not set"
          test -n "${ADMIN_PASSWORD}" && echo "ADMIN_PASSWORD is set" || echo "ADMIN_PASSWORD is not set"
          test -n "${SQL_SERVER_NAME}" && echo "SQL_SERVER_NAME is set" || echo "SQL_SERVER_NAME is not set"
          test -n "${SQL_DATABASE_NAME}" && echo "SQL_DATABASE_NAME is set" || echo "SQL_DATABASE_NAME is not set"
          test -n "${ADMIN_USERNAME}" && echo "ADMIN_USERNAME is set" || echo "ADMIN_USERNAME is not set"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.0

      - name: Set up Azure credentials
        run: |
          echo "Setting Azure credentials"
          export ARM_SUBSCRIPTION_ID=${{ secrets.ARM_SUBSCRIPTION_ID }}
          export ARM_CLIENT_ID=${{ secrets.ARM_CLIENT_ID }}
          export ARM_CLIENT_SECRET=${{ secrets.ARM_CLIENT_SECRET }}
          export ARM_TENANT_ID=${{ secrets.ARM_TENANT_ID }}

      - name: List backend configurations for debugging
        run: |
          echo "resource_group_name=${{ secrets.BACKEND_RESOURCE_GROUP_NAME }}"
          echo "storage_account_name=${{ secrets.BACKEND_STORAGE_ACCOUNT_NAME }}"
          echo "container_name=${{ secrets.BACKEND_CONTAINER_NAME }}"
          echo "key=${{ secrets.BACKEND_KEY }}"

      - name: Terraform Init with debug
        run: |
          terraform init \
            -backend-config="resource_group_name=${{ secrets.BACKEND_RESOURCE_GROUP_NAME }}" \
            -backend-config="storage_account_name=${{ secrets.BACKEND_STORAGE_ACCOUNT_NAME }}" \
            -backend-config="container_name=${{ secrets.BACKEND_CONTAINER_NAME }}" \
            -backend-config="key=${{ secrets.BACKEND_KEY }}" \
            -input=false -no-color
        env:
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

      - name: Terraform Format
        run: terraform fmt -check

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan with debug
        run: |
          terraform plan \
            -var="admin_password=${ADMIN_PASSWORD}" \
            -var="subscription_id=${ARM_SUBSCRIPTION_ID}" \
            -var="sql_server_name=${SQL_SERVER_NAME}" \
            -var="sql_database_name=${SQL_DATABASE_NAME}" \
            -var="admin_username=${ADMIN_USERNAME}" \
            -input=false -no-color
        env:
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

      - name: Terraform Apply with debug
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          terraform apply -auto-approve \
            -var="admin_password=${ADMIN_PASSWORD}" \
            -var="subscription_id=${ARM_SUBSCRIPTION_ID}" \
            -var="sql_server_name=${SQL_SERVER_NAME}" \
            -var="sql_database_name=${SQL_DATABASE_NAME}" \
            -var="admin_username=${ADMIN_USERNAME}" \
            -input=false -no-color
        env:
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
