name: "Create Infrastructure"

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  IAC:
    runs-on: ubuntu-latest
    env:
      TF_LOG: DEBUG
      ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      SQL_SERVER_NAME: ${{ secrets.SQL_SERVER_NAME }}
      SQL_DATABASE_NAME: ${{ secrets.SQL_DATABASE_NAME }}
      ADMIN_USERNAME: ${{ secrets.ADMIN_USERNAME }}
      BACKEND_RESOURCE_GROUP_NAME: ${{ secrets.BACKEND_RESOURCE_GROUP_NAME }}
      BACKEND_STORAGE_ACCOUNT_NAME: ${{ secrets.BACKEND_STORAGE_ACCOUNT_NAME }}
      BACKEND_CONTAINER_NAME: ${{ secrets.BACKEND_CONTAINER_NAME }}
      BACKEND_KEY: ${{ secrets.BACKEND_KEY }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.0

      - name: Set up Azure credentials
        run: |
          echo "Setting Azure credentials"
          export ARM_SUBSCRIPTION_ID=${{ secrets.ARM_SUBSCRIPTION_ID }}
          export ARM_CLIENT_ID=${{ secrets.ARM_CLIENT_ID }}
          export ARM_CLIENT_SECRET=${{ secrets.ARM_CLIENT_SECRET }}
          export ARM_TENANT_ID=${{ secrets.ARM_TENANT_ID }}
          export BACKEND_RESOURCE_GROUP_NAME=${{ secrets.BACKEND_RESOURCE_GROUP_NAME }}
          export BACKEND_STORAGE_ACCOUNT_NAME=${{ secrets.BACKEND_STORAGE_ACCOUNT_NAME }}
          export BACKEND_CONTAINER_NAME=${{ secrets.BACKEND_CONTAINER_NAME }}
          export BACKEND_KEY=${{ secrets.BACKEND_KEY }}

      - name: Create backend.tfvars file
        run: |
          echo "resource_group_name=\"${{ secrets.BACKEND_RESOURCE_GROUP_NAME }}\"" > backend.tfvars
          echo "storage_account_name=\"${{ secrets.BACKEND_STORAGE_ACCOUNT_NAME }}\"" >> backend.tfvars
          echo "container_name=\"${{ secrets.BACKEND_CONTAINER_NAME }}\"" >> backend.tfvars
          echo "key=\"${{ secrets.BACKEND_KEY }}\"" >> backend.tfvars

      - name: Create terraform.tfvars file
        run: |
          echo "subscription_id=\"${{ secrets.ARM_SUBSCRIPTION_ID }}\"" > terraform.tfvars
          echo "client_id=\"${{ secrets.ARM_CLIENT_ID }}\"" >> terraform.tfvars
          echo "client_secret=\"${{ secrets.ARM_CLIENT_SECRET }}\"" >> terraform.tfvars
          echo "tenant_id=\"${{ secrets.ARM_TENANT_ID }}\"" >> terraform.tfvars
          echo "admin_password=\"${{ secrets.ADMIN_PASSWORD }}\"" >> terraform.tfvars
          echo "sql_server_name=\"${{ secrets.SQL_SERVER_NAME }}\"" >> terraform.tfvars
          echo "sql_database_name=\"${{ secrets.SQL_DATABASE_NAME }}\"" >> terraform.tfvars
          echo "admin_username=\"${{ secrets.ADMIN_USERNAME }}\"" >> terraform.tfvars

      - name: Validate backend.tfvars file
        run: |
          cat backend.tfvars

      - name: Validate terraform.tfvars file
        run: |
          cat terraform.tfvars

      - name: Terraform Init
        run: terraform init -backend-config=backend.tfvars

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Apply
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          terraform apply -auto-approve -var-file=terraform.tfvars
