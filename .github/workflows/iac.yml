name: "Create Infrastructure and Run Liquibase"

on:
  workflow_dispatch:

jobs:
  create_infrastructure:
    runs-on: ubuntu-latest
    env:
      #TF_LOG: DEBUG
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      TF_VAR_admin_password: ${{ secrets.ADMIN_PASSWORD }}
      TF_VAR_sql_server_name: ${{ secrets.SQL_SERVER_NAME }}
      TF_VAR_sql_database_name: ${{ secrets.SQL_DATABASE_NAME }}
      TF_VAR_admin_username: ${{ secrets.ADMIN_USERNAME }}
      TF_VAR_subscription_id: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      TF_VAR_client_id: ${{ secrets.ARM_CLIENT_ID }}
      TF_VAR_client_secret: ${{ secrets.ARM_CLIENT_SECRET }}
      TF_VAR_tenant_id: ${{ secrets.ARM_TENANT_ID }}
      TF_VAR_backend_resource_group_name: ${{ secrets.BACKEND_RESOURCE_GROUP_NAME }}
      TF_VAR_backend_storage_account_name: ${{ secrets.BACKEND_STORAGE_ACCOUNT_NAME }}
      TF_VAR_backend_container_name: ${{ secrets.BACKEND_CONTAINER_NAME }}
      TF_VAR_backend_key: ${{ secrets.BACKEND_KEY }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.0

      - name: Login to Azure using Service Principal
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Create backend.tfvars file
        working-directory: ./iac
        run: |
          echo "resource_group_name=\"${{ secrets.BACKEND_RESOURCE_GROUP_NAME }}\"" > backend.tfvars
          echo "storage_account_name=\"${{ secrets.BACKEND_STORAGE_ACCOUNT_NAME }}\"" >> backend.tfvars
          echo "container_name=\"${{ secrets.BACKEND_CONTAINER_NAME }}\"" >> backend.tfvars
          echo "key=\"${{ secrets.BACKEND_KEY }}\"" >> backend.tfvars

      - name: Display backend.tfvars for debugging
        working-directory: ./iac
        run: cat backend.tfvars

      - name: Terraform Init
        working-directory: ./iac
        run: terraform init -backend-config=backend.tfvars

      - name: Terraform Validate
        working-directory: ./iac
        run: terraform validate

      - name: Terraform Plan
        working-directory: ./iac
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        working-directory: ./iac
        run: terraform apply -auto-approve tfplan

  run_liquibase:
    runs-on: ubuntu-latest
    needs: create_infrastructure
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Setup Liquibase and JDBC Driver
        run: |
          sudo apt-get update
          sudo apt-get install -y openjdk-11-jre
          mkdir -p liquibase/lib
          cd liquibase
          if [ ! -f liquibase ]; then
            wget https://github.com/liquibase/liquibase/releases/download/v4.8.0/liquibase-4.8.0.tar.gz
            tar -xzf liquibase-4.8.0.tar.gz --strip-components=1
          fi
          if [ ! -f lib/mssql-jdbc-9.4.1.jre11.jar ]; then
            wget https://repo1.maven.org/maven2/com/microsoft/sqlserver/mssql-jdbc/9.4.1.jre11/mssql-jdbc-9.4.1.jre11.jar -P lib
          fi
          chmod +x liquibase
          export PATH=$PATH:$(pwd)
          echo "export PATH=$PATH:$(pwd)" >> $GITHUB_ENV
          cd ..

      - name: Verify Liquibase Installation
        working-directory: ./liquibase
        run: liquibase --version

      - name: Execute Liquibase Migrations
        working-directory: ./liquibase
        env:
          LIQUIBASE_URL: "jdbc:sqlserver://${{ secrets.SQL_SERVER_NAME }}.database.windows.net:1433;databaseName=${{ secrets.SQL_DATABASE_NAME }};encrypt=true;trustServerCertificate=false;hostNameInCertificate=*.database.windows.net;loginTimeout=30;"
          LIQUIBASE_USERNAME: ${{ secrets.ADMIN_USERNAME }}
          LIQUIBASE_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}
          LIQUIBASE_CHANGELOG: "changelog.json"
          LIQUIBASE_DRIVER: "com.microsoft.sqlserver.jdbc.SQLServerDriver"
        run: liquibase --url=${LIQUIBASE_URL} --username=${LIQUIBASE_USERNAME} --password=${LIQUIBASE_PASSWORD} --changeLogFile=${LIQUIBASE_CHANGELOG} --driver=${LIQUIBASE_DRIVER} update
